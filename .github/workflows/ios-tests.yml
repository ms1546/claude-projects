name: iOS CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

jobs:
  # Code Quality and Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: macos-14
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Cache SwiftLint
      id: cache-swiftlint
      uses: actions/cache@v4
      with:
        path: .swiftlint-cache
        key: ${{ runner.os }}-swiftlint-${{ hashFiles('.swiftlint.yml') }}
        
    - name: Install SwiftLint
      if: steps.cache-swiftlint.outputs.cache-hit != 'true'
      run: |
        brew install swiftlint
        mkdir -p .swiftlint-cache
        
    - name: Run SwiftLint
      run: |
        cd TrainAlert
        if which swiftlint >/dev/null; then
          swiftlint --config .swiftlint.yml --quiet || echo "SwiftLint found issues"
        else
          echo "SwiftLint not found, skipping..."
        fi
        
    - name: Check for trailing newlines
      run: |
        find TrainAlert -name "*.swift" -exec sh -c '
          for file; do
            if [ -s "$file" ] && [ -z "$(tail -c1 < "$file")" ]; then
              echo "✅ $file ends with newline"
            else
              echo "❌ $file does not end with newline"
              exit 1
            fi
          done
        ' sh {} +

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: macos-14
    needs: code-quality
    
    strategy:
      matrix:
        include:
          - name: "Latest iPhone"
            device: "iPhone"
            os: "17"
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: List Available Simulators
      run: xcrun simctl list devices
      
    - name: Cache DerivedData
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-deriveddata-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-deriveddata-
          
    - name: Create Simulator
      run: |
        echo "Available simulators:"
        xcrun simctl list devices available
        
        # Get the latest available iPhone and iOS runtime
        LATEST_IPHONE=$(xcrun simctl list devicetypes | grep -o "com.apple.CoreSimulator.SimDeviceType.iPhone-[^\"]*" | sort -V | tail -1)
        LATEST_IOS=$(xcrun simctl list runtimes | grep -o "com.apple.CoreSimulator.SimRuntime.iOS-[^\"]*" | sort -V | tail -1)
        
        echo "Using device type: $LATEST_IPHONE"
        echo "Using runtime: $LATEST_IOS"
        
        if [ -z "$LATEST_IPHONE" ] || [ -z "$LATEST_IOS" ]; then
          echo "Error: Could not find suitable device type or runtime"
          exit 1
        fi
        
        # Create the simulator
        SIMULATOR_ID=$(xcrun simctl create "TestSimulator" "$LATEST_IPHONE" "$LATEST_IOS")
        echo "Created simulator with ID: $SIMULATOR_ID"
        echo "SIMULATOR_ID=$SIMULATOR_ID" >> $GITHUB_ENV
        
        # Boot the simulator
        xcrun simctl boot "$SIMULATOR_ID" || echo "Simulator boot failed, continuing anyway"
        
    - name: Wait for Simulator Boot
      run: |
        timeout 60 bash -c 'until xcrun simctl list devices | grep "${{ env.SIMULATOR_ID }}" | grep -q "Booted"; do sleep 2; done'
        
    - name: Build App for Testing
      run: |
        cd TrainAlert
        xcodebuild \
          -project TrainAlert.xcodeproj \
          -scheme TrainAlert \
          -destination "id=${{ env.SIMULATOR_ID }}" \
          -configuration Debug \
          -enableCodeCoverage YES \
          build-for-testing
          
    - name: Run Unit Tests
      run: |
        cd TrainAlert
        xcodebuild \
          -project TrainAlert.xcodeproj \
          -scheme TrainAlert \
          -destination "id=${{ env.SIMULATOR_ID }}" \
          -configuration Debug \
          -enableCodeCoverage YES \
          test-without-building \
          -testPlan UnitTests \
          -resultBundlePath TestResults/UnitTests.xcresult
          
    - name: Generate Test Report
      if: always()
      run: |
        cd TrainAlert
        xcrun xccov view TestResults/UnitTests.xcresult --report --json > coverage-report.json
        
    - name: Extract Coverage Percentage
      if: always()
      id: coverage
      run: |
        cd TrainAlert
        COVERAGE=$(python3 -c "
        import json
        with open('coverage-report.json') as f:
            data = json.load(f)
        coverage = data['lineCoverage'] * 100
        print(f'{coverage:.1f}')
        ")
        echo "COVERAGE=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Code Coverage: $COVERAGE%"
        
    - name: Check Coverage Threshold
      if: always()
      run: |
        COVERAGE=${{ steps.coverage.outputs.COVERAGE }}
        THRESHOLD=80.0
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "❌ Code coverage ($COVERAGE%) is below threshold ($THRESHOLD%)"
          exit 1
        else
          echo "✅ Code coverage ($COVERAGE%) meets threshold ($THRESHOLD%)"
        fi
        
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results-${{ matrix.simulator.device }}
        path: TrainAlert/TestResults/UnitTests.xcresult
        
    - name: Upload Coverage Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.simulator.device }}
        path: TrainAlert/coverage-report.json

  # UI Tests
  ui-tests:
    name: UI Tests
    runs-on: macos-14
    needs: unit-tests
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Cache DerivedData
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-deriveddata-ui-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-deriveddata-ui-
          
    - name: Create UI Test Simulator
      run: |
        # Get the latest available iPhone and iOS runtime
        LATEST_IPHONE=$(xcrun simctl list devicetypes | grep -o "com.apple.CoreSimulator.SimDeviceType.iPhone-[^\"]*" | sort -V | tail -1)
        LATEST_IOS=$(xcrun simctl list runtimes | grep -o "com.apple.CoreSimulator.SimRuntime.iOS-[^\"]*" | sort -V | tail -1)
        
        # Create the simulator
        SIMULATOR_ID=$(xcrun simctl create "UITestSimulator" "$LATEST_IPHONE" "$LATEST_IOS")
        echo "UI_SIMULATOR_ID=$SIMULATOR_ID" >> $GITHUB_ENV
        
        # Boot the simulator
        xcrun simctl boot "$SIMULATOR_ID" || echo "Simulator boot failed, continuing anyway"
        
    - name: Wait for UI Simulator Boot
      run: |
        timeout 60 bash -c 'until xcrun simctl list devices | grep "${{ env.UI_SIMULATOR_ID }}" | grep -q "Booted"; do sleep 2; done'
        
    - name: Build for UI Testing
      run: |
        cd TrainAlert
        xcodebuild \
          -project TrainAlert.xcodeproj \
          -scheme TrainAlert \
          -destination "id=${{ env.UI_SIMULATOR_ID }}" \
          -configuration Debug \
          build-for-testing
          
    - name: Run UI Tests
      run: |
        cd TrainAlert
        xcodebuild \
          -project TrainAlert.xcodeproj \
          -scheme TrainAlert \
          -destination "id=${{ env.UI_SIMULATOR_ID }}" \
          -configuration Debug \
          test-without-building \
          -testPlan UITests \
          -resultBundlePath TestResults/UITests.xcresult
          
    - name: Upload UI Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ui-test-results
        path: TrainAlert/TestResults/UITests.xcresult
        
    - name: Upload UI Test Screenshots
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ui-test-screenshots
        path: "~/Library/Logs/DiagnosticReports/*"

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: macos-14
    needs: unit-tests
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Create Integration Test Simulator
      run: |
        # Get the latest available iPhone and iOS runtime
        LATEST_IPHONE=$(xcrun simctl list devicetypes | grep -o "com.apple.CoreSimulator.SimDeviceType.iPhone-[^\"]*" | sort -V | tail -1)
        LATEST_IOS=$(xcrun simctl list runtimes | grep -o "com.apple.CoreSimulator.SimRuntime.iOS-[^\"]*" | sort -V | tail -1)
        
        # Create the simulator
        SIMULATOR_ID=$(xcrun simctl create "IntegrationTestSimulator" "$LATEST_IPHONE" "$LATEST_IOS")
        echo "INTEGRATION_SIMULATOR_ID=$SIMULATOR_ID" >> $GITHUB_ENV
        
        # Boot the simulator
        xcrun simctl boot "$SIMULATOR_ID" || echo "Simulator boot failed, continuing anyway"
        
    - name: Wait for Integration Simulator Boot
      run: |
        timeout 60 bash -c 'until xcrun simctl list devices | grep "${{ env.INTEGRATION_SIMULATOR_ID }}" | grep -q "Booted"; do sleep 2; done'
        
    - name: Run Integration Tests
      run: |
        cd TrainAlert
        xcodebuild \
          -project TrainAlert.xcodeproj \
          -scheme TrainAlert \
          -destination "id=${{ env.INTEGRATION_SIMULATOR_ID }}" \
          -configuration Debug \
          test \
          -testPlan IntegrationTests \
          -resultBundlePath TestResults/IntegrationTests.xcresult
          
    - name: Upload Integration Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: TrainAlert/TestResults/IntegrationTests.xcresult

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: macos-14
    needs: unit-tests
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Create Performance Test Simulator
      run: |
        # Get the latest available iPhone and iOS runtime
        LATEST_IPHONE=$(xcrun simctl list devicetypes | grep -o "com.apple.CoreSimulator.SimDeviceType.iPhone-[^\"]*" | sort -V | tail -1)
        LATEST_IOS=$(xcrun simctl list runtimes | grep -o "com.apple.CoreSimulator.SimRuntime.iOS-[^\"]*" | sort -V | tail -1)
        
        # Create the simulator
        SIMULATOR_ID=$(xcrun simctl create "PerformanceTestSimulator" "$LATEST_IPHONE" "$LATEST_IOS")
        echo "PERFORMANCE_SIMULATOR_ID=$SIMULATOR_ID" >> $GITHUB_ENV
        
        # Boot the simulator
        xcrun simctl boot "$SIMULATOR_ID" || echo "Simulator boot failed, continuing anyway"
        
    - name: Run Performance Tests
      run: |
        cd TrainAlert
        xcodebuild \
          -project TrainAlert.xcodeproj \
          -scheme TrainAlert \
          -destination "id=${{ env.PERFORMANCE_SIMULATOR_ID }}" \
          -configuration Release \
          test \
          -testPlan PerformanceTests \
          -resultBundlePath TestResults/PerformanceTests.xcresult
          
    - name: Upload Performance Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: TrainAlert/TestResults/PerformanceTests.xcresult

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: macos-14
    needs: code-quality
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Run API Key Detection
      run: |
        # Check for hardcoded API keys
        if grep -r "sk-[a-zA-Z0-9]" TrainAlert/ --exclude-dir=TrainAlertTests; then
          echo "❌ Potential API key found in source code"
          exit 1
        else
          echo "✅ No hardcoded API keys detected"
        fi
        
    - name: Check for Debug Code
      run: |
        # Check for debug print statements
        if grep -r "print(" TrainAlert/ --include="*.swift" | grep -v "TrainAlertTests/"; then
          echo "⚠️ Debug print statements found"
        else
          echo "✅ No debug print statements found"
        fi
        
    - name: Validate Info.plist
      run: |
        cd TrainAlert
        plutil -lint TrainAlert/Resources/Info.plist
        echo "✅ Info.plist validation passed"

  # Build Archive (for release builds)
  build-archive:
    name: Build Archive
    runs-on: macos-14
    needs: [unit-tests, ui-tests, integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Setup Build Directory
      run: mkdir -p build/
      
    - name: Build Archive
      run: |
        cd TrainAlert
        xcodebuild archive \
          -project TrainAlert.xcodeproj \
          -scheme TrainAlert \
          -configuration Release \
          -archivePath ../build/TrainAlert.xcarchive \
          -destination "generic/platform=iOS" \
          CODE_SIGNING_ALLOWED=NO
          
    - name: Upload Archive
      uses: actions/upload-artifact@v4
      with:
        name: TrainAlert-Archive
        path: build/TrainAlert.xcarchive

  # Test Summary Report
  test-summary:
    name: Test Summary Report
    runs-on: macos-14
    needs: [unit-tests, ui-tests, integration-tests, performance-tests]
    if: always()
    
    steps:
    - name: Download All Test Results
      uses: actions/download-artifact@v4
      with:
        path: test-results/
        
    - name: Generate Test Summary
      run: |
        echo "# 📊 Test Summary Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Test Status" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.unit-tests.result }}" == "success" ]; then
          echo "| Unit Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Unit Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.ui-tests.result }}" == "success" ]; then
          echo "| UI Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| UI Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.integration-tests.result }}" == "success" ]; then
          echo "| Integration Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Integration Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.performance-tests.result }}" == "success" ]; then
          echo "| Performance Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Performance Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📅 **Generated:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "🔧 **Xcode Version:** Latest Stable" >> $GITHUB_STEP_SUMMARY
        echo "📱 **iOS Version:** Latest Available" >> $GITHUB_STEP_SUMMARY
        echo "🏗️ **Build:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY

  # Notify on Failure
  notify-failure:
    name: Notify on Failure
    runs-on: macos-14
    needs: [unit-tests, ui-tests, integration-tests, performance-tests]
    if: failure()
    
    steps:
    - name: Post Failure Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `
          ## 🚨 CI/CD Pipeline Failed
          
          One or more test suites have failed. Please check the workflow details:
          
          - **Unit Tests:** ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }}
          - **UI Tests:** ${{ needs.ui-tests.result == 'success' && '✅ Passed' || '❌ Failed' }}
          - **Integration Tests:** ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }}
          - **Performance Tests:** ${{ needs.performance-tests.result == 'success' && '✅ Passed' || '❌ Failed' }}
          
          [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          Please fix the failing tests before merging.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
