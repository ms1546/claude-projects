//\n//  CachedAsyncImage.swift\n//  TrainAlert\n//\n//  Created by Claude on 2024/01/08.\n//\n\nimport SwiftUI\n\n/// High-performance cached async image view that optimizes loading and memory usage\nstruct CachedAsyncImage<Content: View>: View {\n    \n    // MARK: - Properties\n    \n    private let urlString: String\n    private let content: (AsyncImagePhase) -> Content\n    \n    @StateObject private var loader = ImageLoader()\n    \n    // MARK: - Initialization\n    \n    init(\n        url urlString: String,\n        @ViewBuilder content: @escaping (AsyncImagePhase) -> Content\n    ) {\n        self.urlString = urlString\n        self.content = content\n    }\n    \n    // MARK: - Body\n    \n    var body: some View {\n        content(loader.phase)\n            .onAppear {\n                loader.loadImage(from: urlString)\n            }\n            .onChange(of: urlString) { newURL in\n                loader.loadImage(from: newURL)\n            }\n    }\n}\n\n// MARK: - Convenience Initializers\n\nextension CachedAsyncImage where Content == Image {\n    \n    /// Create a cached async image with default content\n    init(url urlString: String) {\n        self.init(url: urlString) { phase in\n            switch phase {\n            case .success(let image):\n                image\n                    .resizable()\n            case .failure(_):\n                Image(systemName: \"photo\")\n                    .foregroundColor(.lightGray)\n            case .empty:\n                ProgressView()\n                    .tint(.softBlue)\n            @unknown default:\n                EmptyView()\n            }\n        }\n    }\n}\n\nextension CachedAsyncImage {\n    \n    /// Create a cached async image with placeholder and error views\n    init(\n        url urlString: String,\n        @ViewBuilder placeholder: @escaping () -> Content,\n        @ViewBuilder errorView: @escaping (Error) -> Content\n    ) where Content: View {\n        self.init(url: urlString) { phase in\n            switch phase {\n            case .success(let image):\n                Image(uiImage: image)\n                    .resizable() as! Content\n            case .failure(let error):\n                errorView(error)\n            case .empty:\n                placeholder()\n            @unknown default:\n                placeholder()\n            }\n        }\n    }\n}\n\n// MARK: - Image Loader\n\n@MainActor\nprivate class ImageLoader: ObservableObject {\n    \n    @Published var phase: AsyncImagePhase = .empty\n    \n    private let imageCache = ImageCacheManager.shared\n    private var currentTask: Task<Void, Never>?\n    \n    func loadImage(from urlString: String) {\n        // Cancel any existing task\n        currentTask?.cancel()\n        \n        // Check for immediate cache hit\n        if let cachedImage = imageCache.cachedImage(for: urlString) {\n            phase = .success(cachedImage)\n            return\n        }\n        \n        // Start loading\n        phase = .empty\n        \n        currentTask = Task {\n            do {\n                if let image = await imageCache.loadImage(from: urlString) {\n                    if !Task.isCancelled {\n                        phase = .success(image)\n                    }\n                } else {\n                    if !Task.isCancelled {\n                        phase = .failure(ImageLoadError.loadingFailed)\n                    }\n                }\n            }\n        }\n    }\n    \n    deinit {\n        currentTask?.cancel()\n    }\n}\n\n// MARK: - Supporting Types\n\nenum ImageLoadError: Error, LocalizedError {\n    case loadingFailed\n    case invalidURL\n    \n    var errorDescription: String? {\n        switch self {\n        case .loadingFailed:\n            return \"画像の読み込みに失敗しました\"\n        case .invalidURL:\n            return \"無効なURLです\"\n        }\n    }\n}\n\n// MARK: - AsyncImagePhase Extension\n\nextension AsyncImagePhase {\n    \n    /// Check if the phase represents a loading state\n    var isLoading: Bool {\n        switch self {\n        case .empty:\n            return true\n        default:\n            return false\n        }\n    }\n    \n    /// Check if the phase represents an error state\n    var isError: Bool {\n        switch self {\n        case .failure(_):\n            return true\n        default:\n            return false\n        }\n    }\n    \n    /// Check if the phase has successfully loaded an image\n    var hasImage: Bool {\n        switch self {\n        case .success(_):\n            return true\n        default:\n            return false\n        }\n    }\n}\n\n// MARK: - Preview Support\n\n#if DEBUG\nstruct CachedAsyncImage_Previews: PreviewProvider {\n    static var previews: some View {\n        VStack(spacing: 20) {\n            // Basic usage\n            CachedAsyncImage(url: \"https://example.com/image.jpg\")\n                .frame(width: 200, height: 150)\n                .clipShape(RoundedRectangle(cornerRadius: 8))\n            \n            // Custom content\n            CachedAsyncImage(url: \"https://example.com/image.jpg\") { phase in\n                switch phase {\n                case .success(let image):\n                    Image(uiImage: image)\n                        .resizable()\n                        .aspectRatio(contentMode: .fill)\n                case .failure(_):\n                    VStack {\n                        Image(systemName: \"exclamationmark.triangle\")\n                            .font(.largeTitle)\n                        Text(\"読み込みエラー\")\n                            .font(.caption)\n                    }\n                    .foregroundColor(.red)\n                case .empty:\n                    ProgressView(\"読み込み中...\")\n                        .tint(.softBlue)\n                @unknown default:\n                    EmptyView()\n                }\n            }\n            .frame(width: 200, height: 150)\n            .background(.charcoalGray)\n            .clipShape(RoundedRectangle(cornerRadius: 8))\n            \n            // With placeholder and error view\n            CachedAsyncImage(\n                url: \"https://example.com/image.jpg\",\n                placeholder: {\n                    VStack {\n                        ProgressView()\n                            .tint(.softBlue)\n                        Text(\"読み込み中\")\n                            .font(.caption)\n                            .foregroundColor(.lightGray)\n                    }\n                },\n                errorView: { error in\n                    VStack {\n                        Image(systemName: \"photo\")\n                            .font(.system(size: 30))\n                        Text(error.localizedDescription)\n                            .font(.caption)\n                            .multilineTextAlignment(.center)\n                    }\n                    .foregroundColor(.lightGray)\n                }\n            )\n            .frame(width: 200, height: 150)\n            .background(.charcoalGray)\n            .clipShape(RoundedRectangle(cornerRadius: 8))\n        }\n        .padding()\n        .background(.black)\n        .preferredColorScheme(.dark)\n        .previewDisplayName(\"CachedAsyncImage Examples\")\n    }\n}\n#endif